([is_speeding_on_town_road_lv1] of defeasible-class
   (class-refs rdfs:isDefinedBy rdfs:Resource rdf:type rdfs:Class rdfs:seeAlso rdfs:Resource rdfs:subClassOf rdfs:Class rules defeasible-logic-rule)
   (aliases rdfs:seeAlso rdfs:isDefinedBy)
   (positive 0)
   (negative 0)
   (positive-derivator)
   (negative-derivator)
   (positive-support)
   (negative-support)
   (positive-overruled)
   (negative-overruled)
   (positive-defeated)
   (negative-defeated)
   (proof nil)
   (uri nil)
   (source rdf)
   (lc:name)
   (lc:defendant)
   (lc:driving_on)
   (lc:caused_accident)
   (lc:speed)
   (lc:allowed_speed)
   (rdfs:isDefinedBy)
   (rdf:type [rdfs:Class])
   (rdf:value)
   (rdfs:comment)
   (rdfs:label is_speeding_on_town_road_lv1)
   (rdfs:seeAlso)
   (rdfs:subClassOf [defeasible-class])
   (class-name is_speeding_on_town_road_lv1)
   (rules [rule7] [rule4] [rule2] [rule1])
   (defeasible-stratum -1))

([is_speeding_on_town_road_lv2] of defeasible-class
   (class-refs rdfs:isDefinedBy rdfs:Resource rdf:type rdfs:Class rdfs:seeAlso rdfs:Resource rdfs:subClassOf rdfs:Class rules defeasible-logic-rule)
   (aliases rdfs:seeAlso rdfs:isDefinedBy)
   (positive 0)
   (negative 0)
   (positive-derivator)
   (negative-derivator)
   (positive-support)
   (negative-support)
   (positive-overruled)
   (negative-overruled)
   (positive-defeated)
   (negative-defeated)
   (proof nil)
   (uri nil)
   (source rdf)
   (lc:name)
   (lc:defendant)
   (lc:driving_on)
   (lc:caused_accident)
   (lc:speed)
   (lc:allowed_speed)
   (rdfs:isDefinedBy)
   (rdf:type [rdfs:Class])
   (rdf:value)
   (rdfs:comment)
   (rdfs:label is_speeding_on_town_road_lv2)
   (rdfs:seeAlso)
   (rdfs:subClassOf [defeasible-class])
   (class-name is_speeding_on_town_road_lv2)
   (rules [rule6] [rule3])
   (defeasible-stratum -1))

([is_speeding_on_town_road_lv3] of defeasible-class
   (class-refs rdfs:isDefinedBy rdfs:Resource rdf:type rdfs:Class rdfs:seeAlso rdfs:Resource rdfs:subClassOf rdfs:Class rules defeasible-logic-rule)
   (aliases rdfs:seeAlso rdfs:isDefinedBy)
   (positive 0)
   (negative 0)
   (positive-derivator)
   (negative-derivator)
   (positive-support)
   (negative-support)
   (positive-overruled)
   (negative-overruled)
   (positive-defeated)
   (negative-defeated)
   (proof nil)
   (uri nil)
   (source rdf)
   (lc:name)
   (lc:defendant)
   (lc:driving_on)
   (lc:caused_accident)
   (lc:speed)
   (lc:allowed_speed)
   (rdfs:isDefinedBy)
   (rdf:type [rdfs:Class])
   (rdf:value)
   (rdfs:comment)
   (rdfs:label is_speeding_on_town_road_lv3)
   (rdfs:seeAlso)
   (rdfs:subClassOf [defeasible-class])
   (class-name is_speeding_on_town_road_lv3)
   (rules [rule5])
   (defeasible-stratum 0))

([is_speeding_on_town_road_lv3_with_accident] of defeasible-class
   (class-refs rdfs:isDefinedBy rdfs:Resource rdf:type rdfs:Class rdfs:seeAlso rdfs:Resource rdfs:subClassOf rdfs:Class rules defeasible-logic-rule)
   (aliases rdfs:seeAlso rdfs:isDefinedBy)
   (positive 0)
   (negative 0)
   (positive-derivator)
   (negative-derivator)
   (positive-support)
   (negative-support)
   (positive-overruled)
   (negative-overruled)
   (positive-defeated)
   (negative-defeated)
   (proof nil)
   (uri nil)
   (source rdf)
   (lc:name)
   (lc:defendant)
   (lc:driving_on)
   (lc:caused_accident)
   (lc:speed)
   (lc:allowed_speed)
   (rdfs:isDefinedBy)
   (rdf:type [rdfs:Class])
   (rdf:value)
   (rdfs:comment)
   (rdfs:label is_speeding_on_town_road_lv3_with_accident)
   (rdfs:seeAlso)
   (rdfs:subClassOf [defeasible-class])
   (class-name is_speeding_on_town_road_lv3_with_accident)
   (rules [rule8])
   (defeasible-stratum 0))

([to_pay] of defeasible-class
   (class-refs rdfs:isDefinedBy rdfs:Resource rdf:type rdfs:Class rdfs:seeAlso rdfs:Resource rdfs:subClassOf rdfs:Class rules defeasible-logic-rule)
   (aliases rdfs:seeAlso rdfs:isDefinedBy)
   (positive 0)
   (negative 0)
   (positive-derivator)
   (negative-derivator)
   (positive-support)
   (negative-support)
   (positive-overruled)
   (negative-overruled)
   (positive-defeated)
   (negative-defeated)
   (proof nil)
   (uri nil)
   (source rdf)
   (lc:name)
   (lc:defendant)
   (lc:driving_on)
   (lc:caused_accident)
   (lc:speed)
   (lc:allowed_speed)
   (rdfs:isDefinedBy)
   (rdf:type [rdfs:Class])
   (rdf:value)
   (rdfs:comment)
   (rdfs:label to_pay)
   (rdfs:seeAlso)
   (rdfs:subClassOf [defeasible-class])
   (class-name to_pay)
   (rules [pen1])
   (defeasible-stratum 0))

([to_pay_min] of defeasible-class
   (class-refs rdfs:isDefinedBy rdfs:Resource rdf:type rdfs:Class rdfs:seeAlso rdfs:Resource rdfs:subClassOf rdfs:Class rules defeasible-logic-rule)
   (aliases rdfs:seeAlso rdfs:isDefinedBy)
   (positive 0)
   (negative 0)
   (positive-derivator)
   (negative-derivator)
   (positive-support)
   (negative-support)
   (positive-overruled)
   (negative-overruled)
   (positive-defeated)
   (negative-defeated)
   (proof nil)
   (uri nil)
   (source rdf)
   (lc:name)
   (lc:defendant)
   (lc:driving_on)
   (lc:caused_accident)
   (lc:speed)
   (lc:allowed_speed)
   (rdfs:isDefinedBy)
   (rdf:type [rdfs:Class])
   (rdf:value)
   (rdfs:comment)
   (rdfs:label to_pay_min)
   (rdfs:seeAlso)
   (rdfs:subClassOf [defeasible-class])
   (class-name to_pay_min)
   (rules [pen8] [pen4] [pen2])
   (defeasible-stratum 0))

([to_pay_max] of defeasible-class
   (class-refs rdfs:isDefinedBy rdfs:Resource rdf:type rdfs:Class rdfs:seeAlso rdfs:Resource rdfs:subClassOf rdfs:Class rules defeasible-logic-rule)
   (aliases rdfs:seeAlso rdfs:isDefinedBy)
   (positive 0)
   (negative 0)
   (positive-derivator)
   (negative-derivator)
   (positive-support)
   (negative-support)
   (positive-overruled)
   (negative-overruled)
   (positive-defeated)
   (negative-defeated)
   (proof nil)
   (uri nil)
   (source rdf)
   (lc:name)
   (lc:defendant)
   (lc:driving_on)
   (lc:caused_accident)
   (lc:speed)
   (lc:allowed_speed)
   (rdfs:isDefinedBy)
   (rdf:type [rdfs:Class])
   (rdf:value)
   (rdfs:comment)
   (rdfs:label to_pay_max)
   (rdfs:seeAlso)
   (rdfs:subClassOf [defeasible-class])
   (class-name to_pay_max)
   (rules [pen9] [pen5] [pen3])
   (defeasible-stratum 0))

([max_imprisonment] of defeasible-class
   (class-refs rdfs:isDefinedBy rdfs:Resource rdf:type rdfs:Class rdfs:seeAlso rdfs:Resource rdfs:subClassOf rdfs:Class rules defeasible-logic-rule)
   (aliases rdfs:seeAlso rdfs:isDefinedBy)
   (positive 0)
   (negative 0)
   (positive-derivator)
   (negative-derivator)
   (positive-support)
   (negative-support)
   (positive-overruled)
   (negative-overruled)
   (positive-defeated)
   (negative-defeated)
   (proof nil)
   (uri nil)
   (source rdf)
   (lc:name)
   (lc:defendant)
   (lc:driving_on)
   (lc:caused_accident)
   (lc:speed)
   (lc:allowed_speed)
   (rdfs:isDefinedBy)
   (rdf:type [rdfs:Class])
   (rdf:value)
   (rdfs:comment)
   (rdfs:label max_imprisonment)
   (rdfs:seeAlso)
   (rdfs:subClassOf [defeasible-class])
   (class-name max_imprisonment)
   (rules [pen7] [pen6])
   (defeasible-stratum 0))

