([rule1] of defeasible-rule
   (rule-name rule1)
   (original-rule "rule1 ( lc:case ( lc:defendant ?Defendant ) ( lc:speed ?Speed ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:allowed_speed 50 ) ) ( test ( > ?Speed 70 ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:driving_on \"town_road\" ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:caused_accident \"no\" ) ) => ( is_speeding_on_town_road_lv1 ( defendant ?Defendant ) )")
   (condition-classes)
   (conclusion-class is_speeding_on_town_road_lv1)
   (negated no)
   (superior)
   (deductive-rule rule1-deductive)
   (overruled-rule rule1-overruled)
   (system no)
   (support-rule rule1-support)
   (defeasibly-rule rule1-defeasibly)
   (defeated-rule nil))

([rule2] of defeasible-rule
   (rule-name rule2)
   (original-rule "rule2 ( lc:case ( lc:defendant ?Defendant ) ( lc:speed ?Speed ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:allowed_speed 50 ) ) ( test ( <= ?Speed 50 ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:driving_on \"town_road\" ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:caused_accident \"no\" ) ) => ( not ( is_speeding_on_town_road_lv1 ( defendant ?Defendant ) ) )")
   (condition-classes)
   (conclusion-class is_speeding_on_town_road_lv1)
   (negated yes)
   (superior)
   (deductive-rule rule2-deductive)
   (overruled-rule rule2-overruled)
   (system no)
   (support-rule rule2-support)
   (defeasibly-rule rule2-defeasibly)
   (defeated-rule nil))

([rule3] of defeasible-rule
   (rule-name rule3)
   (original-rule "rule3 ( declare ( superior rule2 rule1 ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:speed ?Speed ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:allowed_speed 50 ) ) ( test ( > ?Speed 80 ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:driving_on \"town_road\" ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:caused_accident \"no\" ) ) => ( is_speeding_on_town_road_lv2 ( defendant ?Defendant ) )")
   (condition-classes)
   (conclusion-class is_speeding_on_town_road_lv2)
   (negated no)
   (superior rule2 rule1)
   (deductive-rule rule3-deductive)
   (overruled-rule rule3-overruled)
   (system no)
   (support-rule rule3-support)
   (defeasibly-rule rule3-defeasibly)
   (defeated-rule rule3-defeated))

([rule4] of defeasible-rule
   (rule-name rule4)
   (original-rule "rule4 ( declare ( superior rule1 ) ) ( is_speeding_on_town_road_lv2 ( defendant ?Defendant ) ) => ( not ( is_speeding_on_town_road_lv1 ( defendant ?Defendant ) ) )")
   (condition-classes)
   (conclusion-class is_speeding_on_town_road_lv1)
   (negated yes)
   (superior rule1)
   (deductive-rule rule4-deductive)
   (overruled-rule rule4-overruled)
   (system no)
   (support-rule rule4-support)
   (defeasibly-rule rule4-defeasibly)
   (defeated-rule rule4-defeated))

([rule5] of defeasible-rule
   (rule-name rule5)
   (original-rule "rule5 ( lc:case ( lc:defendant ?Defendant ) ( lc:speed ?Speed ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:allowed_speed 50 ) ) ( test ( > ?Speed 100 ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:driving_on \"town_road\" ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:caused_accident \"no\" ) ) => ( is_speeding_on_town_road_lv3 ( defendant ?Defendant ) )")
   (condition-classes)
   (conclusion-class is_speeding_on_town_road_lv3)
   (negated no)
   (superior)
   (deductive-rule rule5-deductive)
   (overruled-rule rule5-overruled)
   (system no)
   (support-rule rule5-support)
   (defeasibly-rule rule5-defeasibly)
   (defeated-rule nil))

([rule6] of defeasible-rule
   (rule-name rule6)
   (original-rule "rule6 ( declare ( superior rule3 ) ) ( is_speeding_on_town_road_lv3 ( defendant ?Defendant ) ) => ( not ( is_speeding_on_town_road_lv2 ( defendant ?Defendant ) ) )")
   (condition-classes)
   (conclusion-class is_speeding_on_town_road_lv2)
   (negated yes)
   (superior rule3)
   (deductive-rule rule6-deductive)
   (overruled-rule rule6-overruled)
   (system no)
   (support-rule rule6-support)
   (defeasibly-rule rule6-defeasibly)
   (defeated-rule rule6-defeated))

([rule7] of defeasible-rule
   (rule-name rule7)
   (original-rule "rule7 ( declare ( superior rule1 ) ) ( is_speeding_on_town_road_lv3 ( defendant ?Defendant ) ) => ( not ( is_speeding_on_town_road_lv1 ( defendant ?Defendant ) ) )")
   (condition-classes)
   (conclusion-class is_speeding_on_town_road_lv1)
   (negated yes)
   (superior rule1)
   (deductive-rule rule7-deductive)
   (overruled-rule rule7-overruled)
   (system no)
   (support-rule rule7-support)
   (defeasibly-rule rule7-defeasibly)
   (defeated-rule rule7-defeated))

([rule8] of defeasible-rule
   (rule-name rule8)
   (original-rule "rule8 ( lc:case ( lc:defendant ?Defendant ) ( lc:speed ?Speed ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:allowed_speed 50 ) ) ( test ( > ?Speed 100 ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:driving_on \"town_road\" ) ) ( lc:case ( lc:defendant ?Defendant ) ( lc:caused_accident \"yes\" ) ) => ( is_speeding_on_town_road_lv3_with_accident ( defendant ?Defendant ) )")
   (condition-classes)
   (conclusion-class is_speeding_on_town_road_lv3_with_accident)
   (negated no)
   (superior)
   (deductive-rule rule8-deductive)
   (overruled-rule rule8-overruled)
   (system no)
   (support-rule rule8-support)
   (defeasibly-rule rule8-defeasibly)
   (defeated-rule nil))

([pen1] of defeasible-rule
   (rule-name pen1)
   (original-rule "pen1 ( is_speeding_on_town_road_lv1 ( defendant ?Defendant ) ) => ( to_pay ( value 10000 ) )")
   (condition-classes)
   (conclusion-class to_pay)
   (negated no)
   (superior)
   (deductive-rule pen1-deductive)
   (overruled-rule pen1-overruled)
   (system no)
   (support-rule pen1-support)
   (defeasibly-rule pen1-defeasibly)
   (defeated-rule nil))

([pen2] of defeasible-rule
   (rule-name pen2)
   (original-rule "pen2 ( is_speeding_on_town_road_lv2 ( defendant ?Defendant ) ) => ( to_pay_min ( value 10000 ) )")
   (condition-classes)
   (conclusion-class to_pay_min)
   (negated no)
   (superior)
   (deductive-rule pen2-deductive)
   (overruled-rule pen2-overruled)
   (system no)
   (support-rule pen2-support)
   (defeasibly-rule pen2-defeasibly)
   (defeated-rule nil))

([pen3] of defeasible-rule
   (rule-name pen3)
   (original-rule "pen3 ( is_speeding_on_town_road_lv2 ( defendant ?Defendant ) ) => ( to_pay_max ( value 20000 ) )")
   (condition-classes)
   (conclusion-class to_pay_max)
   (negated no)
   (superior)
   (deductive-rule pen3-deductive)
   (overruled-rule pen3-overruled)
   (system no)
   (support-rule pen3-support)
   (defeasibly-rule pen3-defeasibly)
   (defeated-rule nil))

([pen4] of defeasible-rule
   (rule-name pen4)
   (original-rule "pen4 ( is_speeding_on_town_road_lv3 ( defendant ?Defendant ) ) => ( to_pay_min ( value 20000 ) )")
   (condition-classes)
   (conclusion-class to_pay_min)
   (negated no)
   (superior)
   (deductive-rule pen4-deductive)
   (overruled-rule pen4-overruled)
   (system no)
   (support-rule pen4-support)
   (defeasibly-rule pen4-defeasibly)
   (defeated-rule nil))

([pen5] of defeasible-rule
   (rule-name pen5)
   (original-rule "pen5 ( is_speeding_on_town_road_lv3 ( defendant ?Defendant ) ) => ( to_pay_max ( value 40000 ) )")
   (condition-classes)
   (conclusion-class to_pay_max)
   (negated no)
   (superior)
   (deductive-rule pen5-deductive)
   (overruled-rule pen5-overruled)
   (system no)
   (support-rule pen5-support)
   (defeasibly-rule pen5-defeasibly)
   (defeated-rule nil))

([pen6] of defeasible-rule
   (rule-name pen6)
   (original-rule "pen6 ( is_speeding_on_town_road_lv3 ( defendant ?Defendant ) ) => ( max_imprisonment ( value 30 ) )")
   (condition-classes)
   (conclusion-class max_imprisonment)
   (negated no)
   (superior)
   (deductive-rule pen6-deductive)
   (overruled-rule pen6-overruled)
   (system no)
   (support-rule pen6-support)
   (defeasibly-rule pen6-defeasibly)
   (defeated-rule nil))

([pen7] of defeasible-rule
   (rule-name pen7)
   (original-rule "pen7 ( is_speeding_on_town_road_lv3_with_accident ( defendant ?Defendant ) ) => ( max_imprisonment ( value 60 ) )")
   (condition-classes)
   (conclusion-class max_imprisonment)
   (negated no)
   (superior)
   (deductive-rule pen7-deductive)
   (overruled-rule pen7-overruled)
   (system no)
   (support-rule pen7-support)
   (defeasibly-rule pen7-defeasibly)
   (defeated-rule nil))

([pen8] of defeasible-rule
   (rule-name pen8)
   (original-rule "pen8 ( is_speeding_on_town_road_lv3_with_accident ( defendant ?Defendant ) ) => ( to_pay_min ( value 40000 ) )")
   (condition-classes)
   (conclusion-class to_pay_min)
   (negated no)
   (superior)
   (deductive-rule pen8-deductive)
   (overruled-rule pen8-overruled)
   (system no)
   (support-rule pen8-support)
   (defeasibly-rule pen8-defeasibly)
   (defeated-rule nil))

([pen9] of defeasible-rule
   (rule-name pen9)
   (original-rule "pen9 ( is_speeding_on_town_road_lv3_with_accident ( defendant ?Defendant ) ) => ( to_pay_max ( value 60000 ) )")
   (condition-classes)
   (conclusion-class to_pay_max)
   (negated no)
   (superior)
   (deductive-rule pen9-deductive)
   (overruled-rule pen9-overruled)
   (system no)
   (support-rule pen9-support)
   (defeasibly-rule pen9-defeasibly)
   (defeated-rule nil))

